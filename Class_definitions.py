import hashlib
import random

# The Network class takes care of passing messages between nodes and is in charge of connecting different nodes
class Network:
    def __init__(self,*users):
        if all(map(lambda x: isinstance(x,User), users)):
            self.users = list(users)
        else:
            raise Exception("Invalid input: Network only admits a service")
        self.miners = []
        self.rankers = []
        for user in users:
            if isinstance(x,Miner):
                self.miners.append(user)
            if isinstance(x,Ranker):
                self.rankers.append(user)

    #add users to the network
    def add_users(self,user_lst):
        if all(map(lambda x: isinstance(x,User),user_lst)):
            for user in user_lst:
                self.users.append(user)
                if isinstance(x, Miner):
                    self.miners.append(user)
                if isinstance(x, Ranker):
                    self.rankers.append(user)

    #sends a rating to all the miners in the network
    def send_rating(self,user,rating):
        for miner in self.miners:
            if not(miner is user):
                miner.recieve(rating)

#Users that rank documents
class User:
    def __init__(self, money = 0, blockchain = None):
        self.money = money
        self.blockchain = blockchain

    #adds block to its current block chain to see if i
    def recieve_block(self,block):
        if Valid_Block(block,self.blockchain):
            self.blockchain.add(block)
        else:
            return False
        return True

    def Valid_Block(block,blockchain):
        pass

class Miner(User):
    def __init__(self):
        pass
    def mine(self):
        pass
    def add_block_to_blockchain(self):
        pass

# users that rank documents
class Ranker(User):
    def __init__(self):
        pass

# incase a user is a ranker and a miner
class Miner_Ranker(User,Miner,Ranker):
    def __init__(self):
        pass

#defining nonusers hard objects
class Document:
    def __init__(self):
        pass

# defines a rating generated by a user for a document
class Rating:
    def __init__(self):
        pass

# A Block that is palced in the block chain
class Block:
    def __init__(self):
        pass

#Block Chain class type
class Block_Chain:
    def _init__(self):
        pass

